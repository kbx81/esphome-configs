# https://learn.adafruit.com/adafruit-funhouse/pinouts
substitutions:
  node_name: esp-funhouse
  node_friendly_name: "Adafruit Funhouse"

# esphome:
#   platformio_options:
#     board_build.flash_mode: dio

esp32:
  board: adafruit_funhouse_esp32s2
  framework:
    type: esp-idf
    version: 5.0.2
    platform_version: 6.3.2
    # type: arduino
    # version: 2.0.9
    # platform_version: 5.4.0

packages:
  esp_common: !include shared/esp__common_core.yaml

psram:
  speed: 80MHz

esp32_touch:
  # setup_mode: true
  measurement_duration: 100us
  denoise_grade: BIT12
  denoise_cap_level: L0
  debounce_count: 1
  filter_mode: IIR_16
  noise_threshold: 0
  jitter_step: 0
  smooth_mode: IIR_2

# Enable logging
logger:
  hardware_uart: USB_CDC

time:
  - platform: homeassistant
    id: esptime
    timezone: CST+6CDT,M3.2.0/2,M11.1.0/2

i2c:
  id: i2c_bus
  frequency: 400kHz
  scl: 33
  sda: 34
  scan: false

spi:
  - id: spi_lcd
    clk_pin: 36
    mosi_pin: 35
  - id: spi_led
    clk_pin: 15
    mosi_pin: 14

status_led:
  pin: 37

script:
  - id: update_color
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return id(electricity_cost).state >= id(elec_cost_high).state;'
          then:
            - rtttl.play: "alert 1:d=16,o=5,b=240:e6,p,e6,p,a,p,a,p,e6,p,e6,p,a,p,a,2p,e6,p,e6,p,a,p,a,p,e6,p,e6,p,a,p,a"
      - lambda: |-
          auto e_cost = id(electricity_cost).state;
          if (!isnan(e_cost)) {
            float b_pct = e_cost <= id(elec_cost_low).state ? 1 : 0;
            float g_pct = 0;
            float r_pct = e_cost >= id(elec_cost_high).state ? 1 : 0;

            if ((e_cost > id(elec_cost_normal).state) && (e_cost < id(elec_cost_high).state)) {
              g_pct = 1 - (e_cost - id(elec_cost_normal).state) / (id(elec_cost_high).state - id(elec_cost_normal).state);
              r_pct = (e_cost - id(elec_cost_normal).state) / (id(elec_cost_high).state - id(elec_cost_normal).state);
            } else if ((e_cost > id(elec_cost_low).state) && (e_cost <= id(elec_cost_normal).state)) {
              b_pct = 1 - (e_cost - id(elec_cost_low).state) / (id(elec_cost_normal).state - id(elec_cost_low).state);
              g_pct = (e_cost - id(elec_cost_low).state) / (id(elec_cost_normal).state - id(elec_cost_low).state);
            }

            auto max_pct = std::max(r_pct, std::max(g_pct, b_pct));
            max_pct = (1 - max_pct) + 1;

            id(elec_cost_color) = Color(r_pct * max_pct * 255, g_pct * max_pct * 255, b_pct * max_pct * 255);

            if (id(auto_dotstar).state) {
              auto call = id(dotstar_light).turn_on();
              call.set_transition_length(1000); // in ms
              call.set_brightness(id(light_brightness).state);
              call.set_rgb(r_pct, g_pct, b_pct);
              call.set_effect("None");
              call.perform();
            }
          }

font:
  - file: "resources/Helvetica.ttf"
    id: helvetica_xxlarge
    size: 96
  - file: "resources/Helvetica.ttf"
    id: helvetica_xlarge
    size: 64
  - file: "resources/Helvetica.ttf"
    id: helvetica_large
    size: 48
  - file: "resources/Helvetica.ttf"
    id: helvetica_med
    size: 28
  - file: "resources/Helvetica.ttf"
    id: helvetica_small
    size: 12

binary_sensor:
  - platform: status
    name: Status
    id: conn_status
    on_press:
      then:
        - display.page.show: page1
        - if:
            condition:
              switch.is_on: auto_dotstar
            then:
              - light.control:
                  id: dotstar_light
                  state: on
                  effect: None
    on_release:
      then:
        - display.page.show: page2
        - if:
            condition:
              switch.is_on: auto_dotstar
            then:
              - light.control:
                  id: dotstar_light
                  state: on
                  effect: Random Twinkle
  - platform: gpio
    id: motion_sense
    name: Motion Detection
    device_class: motion
    pin:
      number: 16
  - platform: gpio
    id: button_input_0
    name: Button Up
    pin:
      number: 5
    on_press:
      - switch.toggle: auto_dotstar
      - script.execute: update_color
  - platform: gpio
    id: button_input_1
    name: Button Select
    pin:
      number: 4
    on_press:
      - display.page.show: page1
  - platform: gpio
    id: button_input_2
    name: Button Down
    pin:
      number: 3
    on_press:
      - display.page.show: page2
  - platform: gpio
    id: button_input_back
    name: Button 0
    pin:
      number: 0
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      - light.toggle: dotstar_light
  - platform: esp32_touch
    id: touchpad_left
    name: Touchpad Left
    pin: 6
    threshold: 50000
    on_press:
      - rtttl.play: "alert 1:d=8,o=5,b=160:e"
    on_release:
      - rtttl.play: "alert 1:d=8,o=4,b=160:a"
  - platform: esp32_touch
    id: touchpad_center
    name: Touchpad Middle
    pin: 7
    threshold: 50000
    on_press:
      - rtttl.play: "alert 1:d=8,o=6,b=160:e"
    on_release:
      - rtttl.play: "alert 1:d=8,o=5,b=160:a"
  - platform: esp32_touch
    id: touchpad_right
    name: Touchpad Right
    pin: 8
    threshold: 50000
    on_press:
      - rtttl.play: "alert 1:d=8,o=7,b=160:e"
    on_release:
      - rtttl.play: "alert 1:d=8,o=6,b=160:a"
  - platform: esp32_touch
    id: touchpad_slider_a
    name: Touchpad Slider A
    pin: 9
    threshold: 50000
    on_press:
      - light.turn_on:
          id: dotstar_light
          brightness: 100%
  - platform: esp32_touch
    id: touchpad_slider_b
    name: Touchpad Slider B
    pin: 10
    threshold: 50000
    on_press:
      - light.turn_on:
          id: dotstar_light
          brightness: 80%
  - platform: esp32_touch
    id: touchpad_slider_c
    name: Touchpad Slider C
    pin: 11
    threshold: 50000
    on_press:
      - light.turn_on:
          id: dotstar_light
          brightness: 60%
  - platform: esp32_touch
    id: touchpad_slider_d
    name: Touchpad Slider D
    pin: 12
    threshold: 50000
    on_press:
      - light.turn_on:
          id: dotstar_light
          brightness: 40%
  - platform: esp32_touch
    id: touchpad_slider_e
    name: Touchpad Slider E
    pin: 13
    threshold: 50000
    on_press:
      - light.turn_on:
          id: dotstar_light
          brightness: 20%

color:
  - id: kbx_red
    red: 100%
    green: 0%
    blue: 0%
  - id: kbx_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: kbx_green
    red: 0%
    green: 100%
    blue: 0%
  - id: kbx_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: kbx_gray
    red: 60%
    green: 60%
    blue: 60%
  - id: kbx_white
    red: 100%
    green: 100%
    blue: 100%
  - id: elec_cost_color
    red: 100%
    green: 0%
    blue: 100%

light:
  - platform: monochromatic
    id: lcd_backlight
    name: Display Backlight
    output: lcd_backlight_pwm
    restore_mode: RESTORE_DEFAULT_ON
  - platform: spi_led_strip
    id: dotstar_light
    spi_id: spi_led
    data_rate: 40MHz
    name: APA102 LEDs
    restore_mode: RESTORE_DEFAULT_OFF
    num_leds: 5
    effects:
      - addressable_flicker:
      - addressable_color_wipe:
      - addressable_rainbow:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:

output:
  - platform: ledc
    id: lcd_backlight_pwm
    pin: 21
    channel: 0
  # Buzzer output
  - platform: ledc
    id: rtttl_out
    pin: 42
    channel: 2

rtttl:
  output: rtttl_out

switch:
  - platform: template
    id: auto_dotstar
    name: Auto Light Color
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_off:
      then:
        - rtttl.play: "alert 1:d=16,o=5,b=120:a"
    on_turn_on:
      then:
        - rtttl.play: "alert 1:d=16,o=5,b=120:e6"
        - script.execute: update_color

number:
  - platform: template
    id: light_brightness
    name: Auto Light Brightness
    optimistic: true
    min_value: 0
    max_value: 1
    step: 0.01
    initial_value: 0.5
    restore_value: true
    on_value:
      then:
        - script.execute: update_color
  - platform: template
    id: elec_cost_high
    name: Electricity Cost High Threshold
    entity_category: config
    optimistic: true
    min_value: -100
    max_value: 1000
    step: 1
    initial_value: 28
    restore_value: true
    on_value:
      then:
        - script.execute: update_color
  - platform: template
    id: elec_cost_normal
    name: Electricity Cost Normal Threshold
    entity_category: config
    optimistic: true
    min_value: -100
    max_value: 1000
    step: 1
    initial_value: 7
    restore_value: true
    on_value:
      then:
        - script.execute: update_color
  - platform: template
    id: elec_cost_low
    name: Electricity Cost Low Threshold
    entity_category: config
    optimistic: true
    min_value: -100
    max_value: 1000
    step: 1
    initial_value: 0
    restore_value: true
    on_value:
      then:
        - script.execute: update_color
  # - platform: template
  #   id: electricity_cost_test
  #   name: Electricity Cost Test Value
  #   optimistic: true
  #   min_value: -100
  #   max_value: 1000
  #   step: 0.1
  #   initial_value: 7
  #   restore_value: true
  #   on_value:
  #     then:
  #       - script.execute: update_color

sensor:
  - platform: homeassistant
    id: electricity_cost
    name: Electricity Cost
    entity_id: sensor.comed_current_hour_average_price
    on_value:
      then:
        - script.execute: update_color
  # Phototransistor ADC sensor...can't use with Wi-Fi :(
  # - platform: adc
  #   id: phototransistor
  #   name: Phototransistor ADC
  #   pin: 18
  #   attenuation: 11db
  #   update_interval: 1s
  - platform: aht10
    temperature:
      id: aht20_temperature
      name: AHT20 Temperature
      filters:
        - offset: -2.0
    humidity:
      id: aht20_humidity
      name: AHT20 Humidity
    update_interval: 15s
  - platform: dps310
    temperature:
      id: dps310_temperature
      name: DPS310 Temperature
      filters:
        - offset: -2.6
    pressure:
      id: dps310_pressure
      name: DPS310 Pressure
    update_interval: 15s

display:
  - platform: st7789v
    id: main_lcd
    spi_id: spi_lcd
    model: Adafruit Funhouse 240x240
    rotation: 180
    data_rate: 80MHz
    # eightbitcolor: true
    # cs_pin: 40
    # dc_pin: 39
    # reset_pin: 41
    update_interval: 1s
    pages:
      - id: page1
        lambda: |-
          const uint8_t header_height = 20;
          const uint8_t vert_spacing_offset = 45;
          const uint8_t vert_center = ((it.get_height() - header_height) / 2) + header_height;

          auto logo_color = id(conn_status).state ? id(kbx_gray) : id(kbx_red);
          it.strftime(6, 6, id(helvetica_small), id(kbx_gray), TextAlign::TOP_LEFT, "%Y-%m-%d", id(esptime).now());
          it.strftime((it.get_width() - 6), 6, id(helvetica_small), id(kbx_gray), TextAlign::TOP_RIGHT, "%H:%M:%S", id(esptime).now());
          it.print(it.get_width() / 2, 6, id(helvetica_small), logo_color, TextAlign::TOP_CENTER, "ESPHome");

          if (!isnan(id(electricity_cost).state)) {
            it.printf(it.get_width() / 2, vert_center - vert_spacing_offset - 15, id(helvetica_med), id(kbx_gray), TextAlign::BOTTOM_CENTER, "Hour avg. price:");
            it.printf(it.get_width() / 2, vert_center, id(helvetica_xxlarge), id(kbx_white), TextAlign::CENTER, "%.1f", id(electricity_cost).state);
            it.printf(it.get_width() / 2, vert_center + vert_spacing_offset, id(helvetica_med), id(kbx_gray), TextAlign::TOP_CENTER, "cents");
          }

          it.rectangle(0,  0, it.get_width(), it.get_height(), id(elec_cost_color));
          it.rectangle(1,  1, it.get_width() - 2, it.get_height() - 2, id(elec_cost_color));
          it.rectangle(0, header_height, it.get_width(), 2, id(elec_cost_color));   // header bar
      - id: page2
        lambda: |-
          const uint8_t header_height = 20;
          const uint8_t vert_spacing_offset = 45;
          const uint8_t vert_center = ((it.get_height() - header_height) / 2) + header_height;

          auto logo_color = id(conn_status).state ? id(kbx_gray) : id(kbx_red);
          it.strftime(6, 6, id(helvetica_small), id(kbx_gray), TextAlign::TOP_LEFT, "%Y-%m-%d", id(esptime).now());
          it.strftime((it.get_width() - 6), 6, id(helvetica_small), id(kbx_gray), TextAlign::TOP_RIGHT, "%H:%M:%S", id(esptime).now());
          it.print(it.get_width() / 2, 6, id(helvetica_small), logo_color, TextAlign::TOP_CENTER, "ESPHome");

          it.printf(it.get_width() / 2, vert_center - vert_spacing_offset, id(helvetica_med), id(kbx_gray), TextAlign::BOTTOM_CENTER, "%.1f hPa", id(dps310_pressure).state);
          it.printf(it.get_width() / 2, vert_center, id(helvetica_xlarge), id(kbx_white), TextAlign::CENTER, "%.1f°", id(aht20_temperature).state * 1.8 + 32);
          it.printf(it.get_width() / 2, vert_center + vert_spacing_offset, id(helvetica_med), id(kbx_gray), TextAlign::TOP_CENTER, "%.1f%%", id(aht20_humidity).state);

          it.rectangle(0,  0, it.get_width(), it.get_height(), id(elec_cost_color));
          it.rectangle(1,  1, it.get_width() - 2, it.get_height() - 2, id(elec_cost_color));
          it.rectangle(0, header_height, it.get_width(), 2, id(elec_cost_color));   // header bar
