substitutions:
  node_name: esp-sprinkler-controller
  node_friendly_name: Sprinkler Controller
  project_name: ClimateSprinklerController
  project_version: v1
  home_page_name: "main"
  home_page_number: "1"
  zones_page_name: "zones"
  zones_page_number: "2"
  params_page_name: "params"
  params_page_number: "3"
  sensors_page_name: "sensors"
  sensors_page_number: "4"
  controls_page_name: "main"
  controls_page_number: "0"
  weather_page_name: "main"
  weather_page_number: "1"
  button_off_id: "1"
  button_off_objname: "btnOff"
  button_pause_id: "2"
  button_pause_objname: "btnPause"
  button_run_id: "3"
  button_run_objname: "btnRun"
  button_next_id: "5"
  button_next_objname: "btnNext"
  button_previous_id: "6"
  button_previous_objname: "btnPrev"
  button_door_id: "10"
  button_door_objname: "btnGarageDoor"
  button_valve1_id: "14"
  button_valve1_objname: "btnZone1Power"
  button_valve2_id: "15"
  button_valve2_objname: "btnZone2Power"
  button_valve3_id: "16"
  button_valve3_objname: "btnZone3Power"
  button_valve4_id: "17"
  button_valve4_objname: "btnZone4Power"
  button_valve5_id: "18"
  button_valve5_objname: "btnZone5Power"
  button_valve6_id: "19"
  button_valve6_objname: "btnZone6Power"
  button_valve7_id: "20"
  button_valve7_objname: "btnZone7Power"
  button_valve8_id: "21"
  button_valve8_objname: "btnZone8Power"
  # temperature sensor offsets
  ntc_reference_voltage: 0.9V
  ntc_temperature_offset: "0.0"
  dht22_temperature_offset: "-1.2"
  bme280_temperature_offset: "-0.5"
  bme680_temperature_offset: "-1.2"
  shtc3_temperature_offset: "-1.4"
  tmp117_temperature_offset: "-1.5"

packages:
  esp_common: !include shared/esp__common_core.yaml

esp32:
  board: esp32dev
  flash_size: 16MB
  framework:
    type: arduino

psram:

preferences:
  flash_write_interval: 2min

# Enable Home Assistant API and define services
api:
  services:
    - service: set_start_time
      variables:
        hour: int
        minute: int
      then:
        - globals.set:
            id: start_hour
            value: !lambda "return hour;"
        - globals.set:
            id: start_minute
            value: !lambda "return minute;"
        - lambda: |-
            // validate (and fix, if required) start time
            if ((id(start_hour) < 0) || (id(start_hour) > 23))
              id(start_hour) = 0;
            if ((id(start_minute) < 0) || (id(start_minute) > 59))
              id(start_minute) = 0;
    - service: set_divider
      variables:
        divider: int
      then:
        - sprinkler.set_divider:
            id: sprinkler_ctrlr
            divider: !lambda "return divider;"
    - service: queue_valve
      variables:
        valve_number: int
        run_duration: int
      then:
        - sprinkler.queue_valve:
            id: sprinkler_ctrlr
            valve_number: !lambda "return valve_number;"
            run_duration: !lambda "return run_duration;"
    - service: clear_queued_valves
      then:
        - sprinkler.clear_queued_valves: sprinkler_ctrlr
    - service: start_from_queue
      then:
        - sprinkler.start_from_queue: sprinkler_ctrlr
    - service: update_status
      variables:
        message: string
      then:
        - globals.set:
            id: status_string
            value: !lambda "return message;"
        - script.execute: refresh_display_status_string

globals:
  # start time
  - id: start_hour
    type: int
    restore_value: yes
    initial_value: "5"
  - id: start_minute
    type: int
    restore_value: yes
    initial_value: "0"
  # display brightness (as calculated by ADC/phototransistor)
  - id: display_brightness
    type: float
    restore_value: no
    initial_value: "50"
  # last hour display was fully refreshed
  - id: display_last_full_refresh
    type: int
    restore_value: no
    initial_value: "-1"
  # status string
  - id: status_string
    type: std::string
    restore_value: no
    initial_value: '""'
  # weather condition, temperature, humidity
  - id: weather_air_quality
    type: float
    restore_value: yes
    initial_value: "0"
  - id: weather_condition
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: weather_humidity
    type: float
    restore_value: yes
    initial_value: "0"
  - id: weather_temperature
    type: float
    restore_value: yes
    initial_value: "-100"
  - id: weather_temperature_high
    type: float
    restore_value: no
    initial_value: "-100"
  - id: weather_temperature_low
    type: float
    restore_value: no
    initial_value: "-100"

script:
  # display power management
  - id: motion_sense
    mode: restart
    then:
      - lambda: "id(nextionIdleTimer).set_state(0, true, true);"
  # display screen management
  - id: button_press
    mode: restart
    then:
      - script.execute: motion_sense
  # creates the door opener button pulse
  - id: pulse_door_opener_relay
    mode: single
    then:
      - switch.turn_on: esp_sprinkler_controller_relay_1
      - delay: 500ms
      - switch.turn_off: esp_sprinkler_controller_relay_1
      - delay: 2s
  # update (garage) door status on display
  - id: refresh_display_door_state
    mode: restart
    then:
      - lambda: "id(nextionDoorState).set_state(id(esp_sprinkler_controller_door_sensor).state);"
  # update sprinkler controller general status info on display
  - id: refresh_display_sprinkler_state
    mode: restart
    then:
      - lambda: |-
          id(nextionSprinklerActiveZone).set_state(id(sprinkler_ctrlr).manual_valve().value_or(id(sprinkler_ctrlr).active_valve().value_or(-1)));
          id(nextionSprinklerPausedZone).set_state(id(sprinkler_ctrlr).paused_valve().value_or(-1));
          id(nextionSprinklerAutoAdv).set_state(id(sprinkler_ctrlr).auto_advance());
          id(nextionSprinklerReverse).set_state(id(sprinkler_ctrlr).reverse());
          id(nextionSprinklerStandby).set_state(id(sprinkler_ctrlr).standby());
          id(nextionSprinklerMultiplier).set_state(id(sprinkler_ctrlr).multiplier() * 10.0);
          id(nextionSprinklerRepeat).set_state(id(sprinkler_ctrlr).repeat().value_or(0));
      - script.execute: refresh_display_zone_run_enable_states
  # update sprinkler controller zone names on display
  - id: refresh_display_zone_names
    mode: restart
    then:
      - lambda: |-
          // ...the '+ 16's below are there to trim off our switches' name prefix "Lawn Sprinklers "
          id(nextionTextZone1Name).set_state(id(sprinkler_ctrlr).valve_name(0) + 16, false, true);
          id(nextionTextZone2Name).set_state(id(sprinkler_ctrlr).valve_name(1) + 16, false, true);
          id(nextionTextZone3Name).set_state(id(sprinkler_ctrlr).valve_name(2) + 16, false, true);
          id(nextionTextZone4Name).set_state(id(sprinkler_ctrlr).valve_name(3) + 16, false, true);
          id(nextionTextZone5Name).set_state(id(sprinkler_ctrlr).valve_name(4) + 16, false, true);
  # update sprinkler controller zone enable states on display
  - id: refresh_display_zone_run_enable_states
    mode: restart
    then:
      - lambda: |-
          id(nextionZone1Enabled).set_state(id(sprinkler_ctrlr).enable_switch(0)->state);
          id(nextionZone2Enabled).set_state(id(sprinkler_ctrlr).enable_switch(1)->state);
          id(nextionZone3Enabled).set_state(id(sprinkler_ctrlr).enable_switch(2)->state);
          id(nextionZone4Enabled).set_state(id(sprinkler_ctrlr).enable_switch(3)->state);
          id(nextionZone5Enabled).set_state(id(sprinkler_ctrlr).enable_switch(4)->state);
  # update sprinkler controller zone run durations on display
  - id: refresh_display_zone_run_durations
    mode: restart
    then:
      - lambda: |-
          id(nextionZone1RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(0) / 60);
          id(nextionZone2RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(1) / 60);
          id(nextionZone3RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(2) / 60);
          id(nextionZone4RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(3) / 60);
          id(nextionZone5RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(4) / 60);
  # update status string on display
  - id: refresh_display_status_string
    mode: restart
    then:
      - lambda: |-
          const std::string offline_message = "offline";
          std::string status_message;

          if (id(esp_sprinkler_controller_api_status).state == false) {
            status_message = offline_message;
          }

          if (status_message.empty()) {
            status_message = id(status_string);
          } else if (!id(status_string).empty()) {
            status_message = status_message + " - " + id(status_string);
          }

          if (!status_message.empty()) {
            status_message[0] = toupper(status_message[0]);
          }

          if (id(nextionTextStatus).state != status_message) {
            id(nextionTextStatus).set_state(status_message, false, true);
          }
  # update AQI/IAQ on display
  - id: refresh_display_iaq
    mode: restart
    parameters:
      iaq_value: float
    then:
      - lambda: |-
          struct IaqCondPairing {
            const uint16_t threshold;
            const Color color;
            const std::string condition;
          };

          static const std::vector<IaqCondPairing> iaq_cond_text{
              {50, Color(0, 255, 96), "Excellent"},        {100, Color(160, 255, 0), "Good"},
              {150, Color(255, 255, 0), "Moderate"},       {200, Color(255, 127, 0), "Unhealthy"},
              {300, Color(255, 32, 32), "Very Unhealthy"}, {9000, Color(160, 24, 64), "Hazardous"}};

          auto iaq_string = str_sprintf("%.1f", iaq_value);
          auto iaq_color = Color::WHITE;

          for (IaqCondPairing i : iaq_cond_text) {
            if (iaq_value < i.threshold) {
              iaq_string += " - " + i.condition;
              iaq_color = i.color;
              break;
            }
          }

          id(nextionTextWeatherAq).set_state(iaq_string, false, true);
          id(nextionTextWeatherAq).set_foreground_color(iaq_color);
  # update weather condition on display
  - id: refresh_display_weather_condition
    mode: restart
    then:
      - lambda: |-
          struct WeatherCondPairing {
            const char icon_id;
            const std::string condition;
          };

          static const std::vector<WeatherCondPairing> weather_cond_icon{
              {'F', "clear-night"}, {'A', "cloudy"},          {'O', "exceptional"},  {'B', "fog"},     {'C', "hail"},
              {'E', "lightning"},   {'D', "lightning-rainy"}, {'G', "partlycloudy"}, {'H', "pouring"}, {'I', "rainy"},
              {'K', "snowy"},       {'J', "snowy-rainy"},     {'L', "sunny"},        {'M', "windy"},   {'N', "windy-variant"}};

          const char default_weather_cond_icon_id = 'O';
          std::string icon_id(1, default_weather_cond_icon_id);

          for (WeatherCondPairing i : weather_cond_icon) {
            if (i.condition == id(weather_condition)) {
              icon_id[0] = i.icon_id;
              break;
            }
          }
          id(nextionTextWeatherIcon).set_state(icon_id, false, true);

mcp23017:
  - id: mcp23017_hub
    address: 0x20

status_led:
  pin:
    number: 5
    inverted: true

time:
  - platform: homeassistant
    id: esptime
    timezone: CST+6CDT,M3.2.0/2,M11.1.0/2

i2c:
  id: i2c_bus
  frequency: 400kHz
  sda: 21
  scl: 22
  scan: false

# spi:
#   clk_pin: 14
#   mosi_pin: 13
#   miso_pin: 12

uart:
  id: nextion_uart
  tx_pin: 19
  rx_pin: 18
  baud_rate: 921600

button:
  - platform: template
    id: esp_sprinkler_controller_update_nextion
    name: Update Nextion
    entity_category: diagnostic
    on_press:
      then:
        - lambda: "main_lcd->upload_tft();"

cover:
  - platform: template
    id: esp_sprinkler_controller_garage_door
    name: Garage Door
    icon: mdi:garage-variant
    lambda: |-
      if (id(esp_sprinkler_controller_door_sensor).state) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }
    open_action:
      - script.execute: pulse_door_opener_relay
    close_action:
      - script.execute: pulse_door_opener_relay
    stop_action:
      - script.execute: pulse_door_opener_relay

binary_sensor:
  - platform: status
    id: esp_sprinkler_controller_api_status
    name: API Status
    on_state:
      then:
        - script.execute: refresh_display_status_string
  # - platform: gpio
  #   id: esp_sprinkler_controller_tmp117_alert
  #   name: TMP117 Alert
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 15
  #     mode: INPUT_PULLUP
  # - platform: gpio
  #   id: esp_sprinkler_controller_mcp23017_int_a
  #   name: MCP23017 Interrupt A
  #   pin:
  #     number: 36
  # - platform: gpio
  #   id: esp_sprinkler_controller_mcp23017_int_b
  #   name: MCP23017 Interrupt B
  #   pin:
  #     number: 39
  - platform: gpio
    id: esp_sprinkler_controller_motion_detection
    name: Motion Detection
    device_class: motion
    pin:
      number: 27
    on_state:
      then:
        - if:
            condition:
              switch.is_on: esp_sprinkler_controller_display_on_motion
            then:
              - script.execute: motion_sense
  - platform: gpio
    id: esp_sprinkler_controller_door_sensor
    name: Door Sensor
    device_class: door
    pin:
      mcp23xxx: mcp23017_hub
      number: 13
      mode: INPUT_PULLUP
    filters:
      delayed_on_off: 25ms
    on_state:
      then:
        - script.execute: refresh_display_door_state
  - platform: gpio
    id: esp_sprinkler_controller_mode_button
    name: Mode Button
    pin:
      number: 0
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - sprinkler.shutdown: sprinkler_ctrlr
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_garage_door
    page_id: ${controls_page_number}
    component_id: ${button_door_id}
    on_press:
      then:
        - script.execute: pulse_door_opener_relay
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_off
    page_id: ${controls_page_number}
    component_id: ${button_off_id}
    on_press:
      then:
        - sprinkler.shutdown: sprinkler_ctrlr
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_pause
    page_id: ${controls_page_number}
    component_id: ${button_pause_id}
    on_press:
      then:
        - sprinkler.pause: sprinkler_ctrlr
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_run
    page_id: ${controls_page_number}
    component_id: ${button_run_id}
    on_press:
      then:
        - sprinkler.resume_or_start_full_cycle: sprinkler_ctrlr
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_next
    page_id: ${controls_page_number}
    component_id: ${button_next_id}
    on_press:
      then:
        - sprinkler.next_valve: sprinkler_ctrlr
        - script.execute: button_press
        - script.execute: refresh_display_sprinkler_state
  - platform: nextion
    id: nextion_touch_sprinkler_previous
    page_id: ${controls_page_number}
    component_id: ${button_previous_id}
    on_press:
      then:
        - sprinkler.previous_valve: sprinkler_ctrlr
        - script.execute: button_press
        - script.execute: refresh_display_sprinkler_state
  - platform: nextion
    id: nextion_touch_sprinkler_zone_1
    page_id: ${zones_page_number}
    component_id: ${button_valve1_id}
    component_name: ${zones_page_name}.${button_valve1_objname}
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - sprinkler.start_single_valve:
              id: sprinkler_ctrlr
              valve_number: 0
          - script.execute: button_press
      - min_length: 501ms
        max_length: 1500ms
        then:
          - switch.toggle: parkway_enable
          - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_zone_2
    page_id: ${zones_page_number}
    component_id: ${button_valve2_id}
    component_name: ${zones_page_name}.${button_valve1_objname}
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - sprinkler.start_single_valve:
              id: sprinkler_ctrlr
              valve_number: 1
          - script.execute: button_press
      - min_length: 501ms
        max_length: 1500ms
        then:
          - switch.toggle: front_yard_enable
          - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_zone_3
    page_id: ${zones_page_number}
    component_id: ${button_valve3_id}
    component_name: ${zones_page_name}.${button_valve1_objname}
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - sprinkler.start_single_valve:
              id: sprinkler_ctrlr
              valve_number: 2
          - script.execute: button_press
      - min_length: 501ms
        max_length: 1500ms
        then:
          - switch.toggle: east_side_enable
          - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_zone_4
    page_id: ${zones_page_number}
    component_id: ${button_valve4_id}
    component_name: ${zones_page_name}.${button_valve1_objname}
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - sprinkler.start_single_valve:
              id: sprinkler_ctrlr
              valve_number: 3
          - script.execute: button_press
      - min_length: 501ms
        max_length: 1500ms
        then:
          - switch.toggle: back_yard_enable
          - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_zone_5
    page_id: ${zones_page_number}
    component_id: ${button_valve5_id}
    component_name: ${zones_page_name}.${button_valve1_objname}
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - sprinkler.start_single_valve:
              id: sprinkler_ctrlr
              valve_number: 4
          - script.execute: button_press
      - min_length: 501ms
        max_length: 1500ms
        then:
          - switch.toggle: west_side_enable
          - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_zone_6
    page_id: ${zones_page_number}
    component_id: ${button_valve6_id}
    component_name: ${zones_page_name}.${button_valve1_objname}
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - sprinkler.start_single_valve:
              id: sprinkler_ctrlr
              valve_number: 5
          - script.execute: button_press
      # - min_length: 501ms
      #   max_length: 1500ms
      #   then:
      #     - switch.toggle: west_side_enable
      #     - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_zone_7
    page_id: ${zones_page_number}
    component_id: ${button_valve7_id}
    component_name: ${zones_page_name}.${button_valve1_objname}
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - sprinkler.start_single_valve:
              id: sprinkler_ctrlr
              valve_number: 6
          - script.execute: button_press
      # - min_length: 501ms
      #   max_length: 1500ms
      #   then:
      #     - switch.toggle: west_side_enable
      #     - script.execute: button_press
  - platform: nextion
    id: nextion_touch_sprinkler_zone_8
    page_id: ${zones_page_number}
    component_id: ${button_valve8_id}
    component_name: ${zones_page_name}.${button_valve1_objname}
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - sprinkler.start_single_valve:
              id: sprinkler_ctrlr
              valve_number: 7
          - script.execute: button_press
      # - min_length: 501ms
      #   max_length: 1500ms
      #   then:
      #     - switch.toggle: west_side_enable
      #     - script.execute: button_press

sprinkler:
  - id: sprinkler_ctrlr
    main_switch:
      name: Lawn Sprinklers
      on_turn_off:
        - script.execute: refresh_display_sprinkler_state
      on_turn_on:
        - script.execute: refresh_display_sprinkler_state
    auto_advance_switch:
      name: Lawn Sprinklers Auto-Advance
      id: sprinkler_ctrlr_auto_adv
      on_turn_off:
        - lambda: "id(nextionSprinklerAutoAdv).set_state(0);"
      on_turn_on:
        - lambda: "id(nextionSprinklerAutoAdv).set_state(1);"
    queue_enable_switch:
      name: Lawn Sprinklers Queue Enable
      id: sprinkler_ctrlr_queue_enable
      # on_turn_off:
      #   - lambda: 'id(nextionSprinklerQueue).set_state(0);'
      # on_turn_on:
      #   - lambda: 'id(nextionSprinklerQueue).set_state(1);'
    reverse_switch:
      name: Lawn Sprinklers Reverse
      id: sprinkler_ctrlr_reverse
      on_turn_off:
        - lambda: "id(nextionSprinklerReverse).set_state(0);"
      on_turn_on:
        - lambda: "id(nextionSprinklerReverse).set_state(1);"
    standby_switch:
      name: Lawn Sprinklers Standby
      id: sprinkler_ctrlr_standby
      on_turn_off:
        - lambda: "id(nextionSprinklerStandby).set_state(0);"
      on_turn_on:
        - lambda: "id(nextionSprinklerStandby).set_state(1);"
        - switch.turn_off: esp_sprinkler_controller_scheduled_start
    manual_selection_delay: 3s
    pump_start_pump_delay: 3s
    # pump_start_valve_delay: 3s
    pump_stop_valve_delay: 3s
    # valve_open_delay: 3s
    # pump_switch_off_during_valve_open_delay: true
    valve_overlap: 3s
    # next_prev_ignore_disabled: true
    # numbers_use_minutes: true
    multiplier_number:
      id: esp_sprinkler_controller_multiplier
      name: "Lawn Sprinklers Multiplier"
      set_action:
        - delay: 100ms
        - lambda: "id(nextionSprinklerMultiplier).set_state(id(sprinkler_ctrlr).multiplier() * 10.0);"
        - script.execute: refresh_display_zone_run_durations
    repeat_number:
      id: esp_sprinkler_controller_repeat
      name: "Lawn Sprinklers Repeat"
      set_action:
        - delay: 100ms
        - lambda: |-
            id(nextionSprinklerRepeat).set_state(id(sprinkler_ctrlr).repeat().value_or(0));
    valves:
      - valve_switch:
          name: Lawn Sprinklers Parkway
          # on_turn_off:
          #   - script.execute: refresh_display_sprinkler_state
          on_turn_on:
            - script.execute: refresh_display_sprinkler_state
        enable_switch:
          name: Lawn Sprinklers Parkway Enable
          id: parkway_enable
          on_turn_off:
            - lambda: "id(nextionZone1Enabled).set_state(0);"
          on_turn_on:
            - lambda: "id(nextionZone1Enabled).set_state(1);"
        pump_switch_id: esp_sprinkler_controller_triac_main
        # run_duration: 1800s
        run_duration_number:
          id: esp_sprinkler_zone_1_run_duration
          name: "Lawn Sprinkler Parkway Run Duration"
          initial_value: 30
          unit_of_measurement: min
          set_action:
            - delay: 100ms
            - lambda: "id(nextionZone1RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(0) / 60);"
        valve_switch_id: esp_sprinkler_controller_triac_zone_1
      - valve_switch:
          name: Lawn Sprinklers Front Yard
          # on_turn_off:
          #   - script.execute: refresh_display_sprinkler_state
          on_turn_on:
            - script.execute: refresh_display_sprinkler_state
        enable_switch:
          name: Lawn Sprinklers Front Yard Enable
          id: front_yard_enable
          on_turn_off:
            - lambda: "id(nextionZone2Enabled).set_state(0);"
          on_turn_on:
            - lambda: "id(nextionZone2Enabled).set_state(1);"
        pump_switch_id: esp_sprinkler_controller_triac_main
        # run_duration: 3600s
        run_duration_number:
          id: esp_sprinkler_zone_2_run_duration
          name: "Lawn Sprinkler Front Yard Run Duration"
          initial_value: 60
          unit_of_measurement: min
          set_action:
            - delay: 100ms
            - lambda: "id(nextionZone2RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(1) / 60);"
        valve_switch_id: esp_sprinkler_controller_triac_zone_2
      - valve_switch:
          name: Lawn Sprinklers East Side
          # on_turn_off:
          #   - script.execute: refresh_display_sprinkler_state
          on_turn_on:
            - script.execute: refresh_display_sprinkler_state
        enable_switch:
          name: Lawn Sprinklers East Side Enable
          id: east_side_enable
          on_turn_off:
            - lambda: "id(nextionZone3Enabled).set_state(0);"
          on_turn_on:
            - lambda: "id(nextionZone3Enabled).set_state(1);"
        pump_switch_id: esp_sprinkler_controller_triac_main
        # run_duration: 900s
        run_duration_number:
          id: esp_sprinkler_zone_3_run_duration
          name: "Lawn Sprinkler East Side Run Duration"
          initial_value: 15
          unit_of_measurement: min
          set_action:
            - delay: 100ms
            - lambda: "id(nextionZone3RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(2) / 60);"
        valve_switch_id: esp_sprinkler_controller_triac_zone_3
      - valve_switch:
          name: Lawn Sprinklers Back Yard
          # on_turn_off:
          #   - script.execute: refresh_display_sprinkler_state
          on_turn_on:
            - script.execute: refresh_display_sprinkler_state
        enable_switch:
          name: Lawn Sprinklers Back Yard Enable
          id: back_yard_enable
          on_turn_off:
            - lambda: "id(nextionZone4Enabled).set_state(0);"
          on_turn_on:
            - lambda: "id(nextionZone4Enabled).set_state(1);"
        pump_switch_id: esp_sprinkler_controller_triac_main
        # run_duration: 5400s
        run_duration_number:
          id: esp_sprinkler_zone_4_run_duration
          name: "Lawn Sprinkler Back Yard Run Duration"
          initial_value: 90
          unit_of_measurement: min
          set_action:
            - delay: 100ms
            - lambda: "id(nextionZone4RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(3) / 60);"
        valve_switch_id: esp_sprinkler_controller_triac_zone_4
      - valve_switch:
          name: Lawn Sprinklers West Side
          # on_turn_off:
          #   - script.execute: refresh_display_sprinkler_state
          on_turn_on:
            - script.execute: refresh_display_sprinkler_state
        enable_switch:
          name: Lawn Sprinklers West Side Enable
          id: west_side_enable
          on_turn_off:
            - lambda: "id(nextionZone5Enabled).set_state(0);"
          on_turn_on:
            - lambda: "id(nextionZone5Enabled).set_state(1);"
        pump_switch_id: esp_sprinkler_controller_triac_main
        # run_duration: 2700s
        run_duration_number:
          id: esp_sprinkler_zone_5_run_duration
          name: "Lawn Sprinkler West Side Run Duration"
          initial_value: 45
          unit_of_measurement: min
          set_action:
            - delay: 100ms
            - lambda: "id(nextionZone5RunTimeMin).set_state(id(sprinkler_ctrlr).valve_run_duration_adjusted(4) / 60);"
        valve_switch_id: esp_sprinkler_controller_triac_zone_5

number:
  - platform: template
    id: esp_sprinkler_controller_display_brightness
    name: Display Brightness
    mode: box
    min_value: 0
    max_value: 100
    step: 1
    lambda: "return id(nextionTargetBrightness).state;"
    unit_of_measurement: "%"
    update_interval: 1s
    set_action:
      then:
        - lambda: |-
            if (id(nextionTargetBrightness).state != x)
              id(nextionTargetBrightness).set_state(x, true, true);
  - platform: template
    id: esp_sprinkler_controller_display_minimum_brightness
    name: Display Minimum Brightness
    entity_category: config
    mode: box
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 99
    step: 1
    initial_value: 5
    restore_value: true
  - platform: template
    id: esp_sprinkler_controller_display_maximum_brightness
    name: Display Maximum Brightness
    entity_category: config
    mode: box
    optimistic: true
    unit_of_measurement: "%"
    min_value: 1
    max_value: 100
    step: 1
    initial_value: 100
    restore_value: true
  - platform: template
    id: esp_sprinkler_controller_display_brightness_idle_reduction
    name: Display Brightness Idle Reduction
    entity_category: config
    mode: box
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 80
    restore_value: true
  - platform: template
    id: esp_sprinkler_idle_timeout
    name: Idle Timeout
    entity_category: config
    mode: box
    optimistic: true
    unit_of_measurement: s
    min_value: 5
    max_value: 900
    step: 1
    initial_value: 120
    restore_value: true
    on_value:
      then:
        - lambda: "id(nextionIdleTimeout).set_state(x * 2, true, true);"
  # for determining sensor weights when used as a part of climate control system average
  - platform: template
    id: esp_sprinkler_controller_humidity_weight
    name: Humidity Weight
    entity_category: config
    optimistic: true
    min_value: 0
    max_value: 10
    step: 1
    initial_value: 5
    restore_value: true
  - platform: template
    id: esp_sprinkler_controller_temperature_weight
    name: Temperature Weight
    entity_category: config
    optimistic: true
    min_value: 0
    max_value: 10
    step: 1
    initial_value: 5
    restore_value: true

switch:
  # display power (hard/physical)
  - platform: gpio
    id: esp_sprinkler_controller_display_power
    name: Display Power
    entity_category: config
    restore_mode: ALWAYS_ON
    pin:
      number: 25
      mode: OUTPUT
  # automatic display brightness control
  - platform: template
    id: esp_sprinkler_controller_display_auto_brightness
    name: Display Automatic Brightness
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_off:
      then:
        - lambda: "id(nextionAutoBrightness).set_state(0, true, true);"
    on_turn_on:
      then:
        - lambda: "id(nextionAutoBrightness).set_state(1, true, true);"
  # display power (soft)
  - platform: template
    id: esp_sprinkler_controller_display
    name: Display
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
  # display brightness control by motion
  - platform: template
    id: esp_sprinkler_controller_display_on_motion
    name: Display On Motion
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
  # garage door opener "button"
  - platform: template
    id: esp_sprinkler_controller_opener_button
    name: Door Opener Button
    turn_on_action:
      - script.execute: pulse_door_opener_relay
    lambda: "return id(esp_sprinkler_controller_relay_1).state;"
  # enables scheduled start at the time configured
  - platform: template
    id: esp_sprinkler_controller_scheduled_start
    name: Scheduled Start
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_off:
      - lambda: "id(nextionSprinklerAutoStart).set_state(0);"
    on_turn_on:
      - lambda: "id(nextionSprinklerAutoStart).set_state(1);"
  # physical switches
  - platform: gpio
    id: esp_sprinkler_controller_thermistor_vcc
    name: Thermistor Vcc
    internal: true
    restore_mode: ALWAYS_ON
    pin:
      number: 33
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_mcp23017_reset
    # name: MCP23017 Reset
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      number: 4
      mode: OUTPUT
      inverted: true
  - platform: gpio
    id: esp_sprinkler_controller_triac_main
    name: TRIAC Main Valve
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 0
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_6
    name: TRIAC Zone 6
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 1
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_7
    name: TRIAC Zone 7
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 2
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_1
    name: TRIAC Zone 1
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 3
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_2
    name: TRIAC Zone 2
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 4
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_3
    name: TRIAC Zone 3
    restore_mode: ALWAYS_OFF
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 5
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_4
    name: TRIAC Zone 4
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 6
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_5
    name: TRIAC Zone 5
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 7
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_relay_1
    name: Relay 1
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 8
      mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_relay_2
  #   name: Relay 2
  #   internal: true
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 9
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_relay_3
  #   name: Relay 3
  #   internal: true
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 10
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_1
  #   name: Test Output 1
  #   internal: true
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 11
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_2
  #   name: Test Output 2
  #   internal: true
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 12
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_3
  #   name: Test Output 3
  #   internal: true
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 13
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_4
  #   name: Test Output 4
  #   internal: true
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 14
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_5
  #   name: Test Output 5
  #   internal: true
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 15
  #     mode: OUTPUT

# BME680 BSEC sensor
bme68x_bsec2_i2c:
  address: 0x77
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V

sensor:
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTargetBrightness
    variable_name: targetBrightness
  - platform: nextion
    nextion_id: main_lcd
    id: nextionMaxBrightness
    variable_name: maxBrightness
  - platform: nextion
    nextion_id: main_lcd
    id: nextionMinBrightness
    variable_name: minBrightness
  - platform: nextion
    nextion_id: main_lcd
    id: nextionIdleTimeout
    variable_name: idleTimeout
  - platform: nextion
    nextion_id: main_lcd
    id: nextionIdleTimer
    variable_name: idleTimer
  - platform: nextion
    nextion_id: main_lcd
    id: nextionAutoBrightness
    variable_name: autoBrightness
  - platform: nextion
    nextion_id: main_lcd
    id: nextionAutoHome
    variable_name: autoHome
  # Nextion sprinkler controller state sensors
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerAutoAdv
    variable_name: sprinklerAutoAdv
    on_value:
      then:
        - lambda: "id(sprinkler_ctrlr).set_auto_advance(id(nextionSprinklerAutoAdv).state);"
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerReverse
    variable_name: sprinklerReverse
    on_value:
      then:
        - lambda: "id(sprinkler_ctrlr).set_reverse(id(nextionSprinklerReverse).state);"
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerStandby
    variable_name: sprinklerStandby
    on_value:
      then:
        - lambda: "id(sprinkler_ctrlr).set_standby(id(nextionSprinklerStandby).state);"
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerAutoStart
    variable_name: sprinklerAutoStart
    on_value:
      then:
        - if:
            condition:
              lambda: "return id(nextionSprinklerAutoStart).state == 0;"
            then:
              - switch.turn_off: esp_sprinkler_controller_scheduled_start
            else:
              - switch.turn_on: esp_sprinkler_controller_scheduled_start
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerMultiplier
    variable_name: sprinklerMult
    on_value:
      then:
        - sprinkler.set_multiplier:
            id: sprinkler_ctrlr
            multiplier: !lambda "return id(nextionSprinklerMultiplier).state / 10.0;"
        - script.execute: refresh_display_zone_run_durations
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerRepeat
    variable_name: sprinklerRepeat
    on_value:
      then:
        - sprinkler.set_repeat:
            id: sprinkler_ctrlr
            repeat: !lambda "return id(nextionSprinklerRepeat).state;"
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerActiveZone
    variable_name: sprinklerActiveZone
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerPausedZone
    variable_name: sprinklerPausedZone
  - platform: nextion
    nextion_id: main_lcd
    id: nextionSprinklerZoneTotalSecRemain
    variable_name: sprinklerZoneTotalSecRemain
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone1Enabled
    variable_name: zone1Enabled
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone2Enabled
    variable_name: zone2Enabled
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone3Enabled
    variable_name: zone3Enabled
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone4Enabled
    variable_name: zone4Enabled
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone5Enabled
    variable_name: zone5Enabled
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone6Enabled
    variable_name: zone6Enabled
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone7Enabled
    variable_name: zone7Enabled
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone8Enabled
    variable_name: zone8Enabled
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone1RunTimeMin
    variable_name: zone1RunTimeMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone2RunTimeMin
    variable_name: zone2RunTimeMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone3RunTimeMin
    variable_name: zone3RunTimeMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone4RunTimeMin
    variable_name: zone4RunTimeMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone5RunTimeMin
    variable_name: zone5RunTimeMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone6RunTimeMin
    variable_name: zone6RunTimeMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone7RunTimeMin
    variable_name: zone7RunTimeMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionZone8RunTimeMin
    variable_name: zone8RunTimeMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionDoorState
    variable_name: doorState
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentPres
    variable_name: currentPres
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherTemp
    variable_name: weatherTemp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherHum
    variable_name: weatherHum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherTempHigh
    variable_name: weatherTempHigh
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherTempLow
    variable_name: weatherTempLow
  # HA sensors we track - weather
  - platform: homeassistant
    id: weather_air_quality_ha
    entity_id: sensor.aqi_wh41
    on_value:
      then:
        - globals.set:
            id: weather_air_quality
            value: !lambda "return x;"
        - script.execute:
            id: refresh_display_iaq
            iaq_value: !lambda "return x;"
  - platform: homeassistant
    id: weather_humidity_ha
    entity_id: sensor.gw2000b_v2_2_4_humidity
    on_value:
      then:
        - globals.set:
            id: weather_humidity
            value: !lambda "return x;"
        - lambda: "id(nextionWeatherHum).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: weather_temperature_ha
    entity_id: sensor.gw2000b_v2_2_4_outdoor_temperature
    on_value:
      then:
        - globals.set:
            id: weather_temperature
            value: !lambda "return x;"
        - lambda: "id(nextionWeatherTemp).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: weather_forecasted_high_ha
    entity_id: sensor.weather_forecasted_high
    on_value:
      then:
        - globals.set:
            id: weather_temperature_high
            value: !lambda "return x;"
        - lambda: "id(nextionWeatherTempHigh).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: weather_forecasted_low_ha
    entity_id: sensor.weather_forecasted_low
    on_value:
      then:
        - globals.set:
            id: weather_temperature_low
            value: !lambda "return x;"
        - lambda: "id(nextionWeatherTempLow).set_state(roundf(x * 10), false, true);"
  # Phototransistor ADC sensor
  - platform: adc
    id: adc_sensor_phototransistor
    name: Phototransistor ADC
    pin: 32
    attenuation: 12db
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 3
          send_first_at: 1
    on_value:
      then:
        - lambda: |-
            if (id(esp_sprinkler_controller_display).state) {
              auto brightness_mult_max = 100.0;
              auto brightness_mult_min = 100.0 - id(esp_sprinkler_controller_display_brightness_idle_reduction).state;
              auto brightness_max = clamp<float>(roundf(id(adc_sensor_phototransistor).state / 3.9 * brightness_mult_max), id(esp_sprinkler_controller_display_minimum_brightness).state, id(esp_sprinkler_controller_display_maximum_brightness).state);
              auto brightness_min = clamp<float>(roundf(id(adc_sensor_phototransistor).state / 3.9 * brightness_mult_min), id(esp_sprinkler_controller_display_minimum_brightness).state, id(esp_sprinkler_controller_display_maximum_brightness).state);
              // ESP_LOGD("display_brightness", "Max: %f - Min: %f", brightness_max, brightness_min);
              id(nextionMaxBrightness).set_state(brightness_max, true, true);
              id(nextionMinBrightness).set_state(brightness_min, true, true);
            } else {
              id(nextionMaxBrightness).set_state(0, true, true);
              id(nextionMinBrightness).set_state(0, true, true);
            }
  # NTC thermistor ADC sensor
  - platform: adc
    id: adc_sensor_thermistor
    name: Thermistor ADC
    pin: 34
    internal: true
    update_interval: 1s
  # NTC thermistor resistance sensor
  - platform: resistance
    id: thermistor_sensor
    name: NTC Thermistor Resistance
    sensor: adc_sensor_thermistor
    configuration: DOWNSTREAM
    reference_voltage: ${ntc_reference_voltage}
    resistor: 10kOhm
    internal: true
  # NTC thermistor sensor
  - platform: ntc
    id: esp_sprinkler_controller_thermistor_temperature
    name: NTC Thermistor Temperature
    sensor: thermistor_sensor
    calibration:
      b_constant: 3380
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    filters:
      - offset: ${ntc_temperature_offset}
      - sliding_window_moving_average:
          window_size: 60
          send_every: 15
          send_first_at: 15
    on_value:
      then:
        - lambda: |-
            auto temperature_string = str_sprintf("%.1f", celsius_to_fahrenheit(id(esp_sprinkler_controller_thermistor_temperature).state)) + "\xB0";
            id(nextionTextSensor6a).set_state(temperature_string, false, true);
  # DHT22 sensor
  - platform: dht
    pin: 23
    model: AM2302
    temperature:
      id: esp_sprinkler_controller_dht22_temperature
      name: DHT22 Temperature
      filters:
        - offset: ${dht22_temperature_offset}
      on_value:
        then:
          - lambda: |-
              auto temperature_string = str_sprintf("%.1f", celsius_to_fahrenheit(id(esp_sprinkler_controller_dht22_temperature).state)) + "\xB0";
              id(nextionTextSensor5a).set_state(temperature_string, false, true);
    humidity:
      id: esp_sprinkler_controller_dht22_humidity
      name: DHT22 Humidity
      accuracy_decimals: 1
      on_value:
        then:
          - lambda: |-
              auto humidity_string = str_sprintf("%.1f", id(esp_sprinkler_controller_dht22_humidity).state) + "%";
              id(nextionTextSensor5b).set_state(humidity_string, false, true);
    update_interval: 15s
  # BME280 sensor
  - platform: bme280_i2c
    address: 0x76
    temperature:
      id: esp_sprinkler_controller_bme280_temperature
      name: BME280 Temperature
      filters:
        - offset: ${bme280_temperature_offset}
      on_value:
        then:
          - lambda: |-
              auto temperature_string = str_sprintf("%.1f", celsius_to_fahrenheit(id(esp_sprinkler_controller_bme280_temperature).state)) + "\xB0";
              id(nextionTextSensor2a).set_state(temperature_string, false, true);
    humidity:
      id: esp_sprinkler_controller_bme280_humidity
      name: BME280 Humidity
      on_value:
        then:
          - lambda: |-
              auto humidity_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme280_humidity).state) + "%";
              id(nextionTextSensor2b).set_state(humidity_string, false, true);
    pressure:
      id: esp_sprinkler_controller_bme280_pressure
      name: BME280 Pressure
      on_value:
        then:
          - lambda: |-
              auto pressure_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme280_pressure).state) + "hPa";
              id(nextionTextSensor2c).set_state(pressure_string, false, true);
    update_interval: 15s
  # BME680 BSEC sensor
  - platform: bme68x_bsec2
    temperature:
      id: esp_sprinkler_controller_bme680_temperature
      name: BME680 Temperature
      filters:
        - offset: ${bme680_temperature_offset}
      on_value:
        then:
          - lambda: |-
              auto temperature_string = str_sprintf("%.1f", celsius_to_fahrenheit(id(esp_sprinkler_controller_bme680_temperature).state)) + "\xB0";
              id(nextionTextSensor1a).set_state(temperature_string, false, true);
    humidity:
      id: esp_sprinkler_controller_bme680_humidity
      name: BME680 Humidity
      on_value:
        then:
          - lambda: |-
              auto humidity_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme680_humidity).state) + "%";
              id(nextionTextSensor1b).set_state(humidity_string, false, true);
    pressure:
      id: esp_sprinkler_controller_bme680_pressure
      name: BME680 Pressure
      on_value:
        then:
          - lambda: |-
              id(nextionCurrentPres).set_state(roundf(id(esp_sprinkler_controller_bme680_pressure).state * 10), false, true);
              auto pressure_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme680_pressure).state) + "hPa";
              id(nextionTextSensor1c).set_state(pressure_string, false, true);
    gas_resistance:
      id: esp_sprinkler_controller_bme680_gas_resistance
      name: BME680 Gas Resistance
      # on_value:
      #   then:
      #     - lambda: |-
      #         auto gas_res_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme680_gas_resistance).state);
      #         id(nextionTextSensor1d).set_state(gas_res_string, false, true);
    iaq_static:
      id: esp_sprinkler_controller_bme680_iaq
      name: BME680 IAQ
      on_value:
        then:
          - lambda: |-
              auto iaq_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme680_iaq).state);
              id(nextionTextSensor1d).set_state(iaq_string, false, true);
    co2_equivalent:
      id: esp_sprinkler_controller_bme680_eco2
      name: BME680 eCO2
    breath_voc_equivalent:
      id: esp_sprinkler_controller_bme680_evoc
      name: BME680 Breath eVOC
  # BME680 sensor
  # - platform: bme680
  #   address: 0x77
  #   temperature:
  #     id: esp_sprinkler_controller_bme680_temperature
  #     name: BME680 Temperature
  #     filters:
  #       - offset: -1.2
  #     on_value:
  #       then:
  #         - lambda: |-
  #             auto temperature_string = str_sprintf("%.1f", celsius_to_fahrenheit(id(esp_sprinkler_controller_bme680_temperature).state)) + "\xB0";
  #             id(nextionTextSensor1a).set_state(temperature_string, false, true);
  #   humidity:
  #     id: esp_sprinkler_controller_bme680_humidity
  #     name: BME680 Humidity
  #     on_value:
  #       then:
  #         - lambda: |-
  #             auto humidity_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme680_humidity).state) + "%";
  #             id(nextionTextSensor1b).set_state(humidity_string, false, true);
  #   pressure:
  #     id: esp_sprinkler_controller_bme680_pressure
  #     name: BME680 Pressure
  #     on_value:
  #       then:
  #         - lambda: |-
  #             auto pressure_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme680_pressure).state) + "hPa";
  #             id(nextionTextSensor1c).set_state(pressure_string, false, true);
  #   gas_resistance:
  #     id: esp_sprinkler_controller_bme680_gas_resistance
  #     name: BME680 Gas Resistance
  #     on_value:
  #       then:
  #         - lambda: |-
  #             auto gas_res_string = str_sprintf("%.1f", id(esp_sprinkler_controller_bme680_gas_resistance).state);
  #             id(nextionTextSensor1d).set_state(gas_res_string, false, true);
  #   update_interval: 15s
  # SHTC3 sensor
  - platform: shtcx
    temperature:
      id: esp_sprinkler_controller_shtcx_temperature
      name: SHTC3 Temperature
      filters:
        - offset: ${shtc3_temperature_offset}
      on_value:
        then:
          - lambda: |-
              auto temperature_string = str_sprintf("%.1f", celsius_to_fahrenheit(id(esp_sprinkler_controller_shtcx_temperature).state)) + "\xB0";
              id(nextionTextSensor3a).set_state(temperature_string, false, true);
    humidity:
      id: esp_sprinkler_controller_shtcx_humidity
      name: SHTC3 Humidity
      on_value:
        then:
          - lambda: |-
              auto humidity_string = str_sprintf("%.1f", id(esp_sprinkler_controller_shtcx_humidity).state) + "%";
              id(nextionTextSensor3b).set_state(humidity_string, false, true);
    update_interval: 15s
  # TMP117 sensor
  - platform: tmp117
    id: esp_sprinkler_controller_tmp117_temperature
    name: TMP117 Temperature
    filters:
      - offset: ${tmp117_temperature_offset}
    on_value:
      then:
        - lambda: |-
            auto temperature_string = str_sprintf("%.1f", celsius_to_fahrenheit(id(esp_sprinkler_controller_tmp117_temperature).state)) + "\xB0";
            id(nextionTextSensor4a).set_state(temperature_string, false, true);
    update_interval: 15s
  # SGP40 sensor
  - platform: sgp4x
    voc:
      id: esp_sprinkler_controller_sgp40_voc
      name: SGP40 VOC Index
      on_value:
        then:
          - lambda: |-
              auto voc_string = str_sprintf("%.1f", id(esp_sprinkler_controller_sgp40_voc).state);
              id(nextionTextSensor8d).set_state(voc_string, false, true);
    update_interval: 15s
    compensation:
      humidity_source: esp_sprinkler_controller_shtcx_humidity
      temperature_source: esp_sprinkler_controller_shtcx_temperature

text_sensor:
  - platform: bme68x_bsec2
    iaq_accuracy:
      id: esp_sprinkler_controller_bme680_accuracy
      name: BME680 Accuracy
  # HA sensors we track - weather condition
  - platform: homeassistant
    id: weather_condition_ha
    entity_id: weather.home_fairfield
    on_value:
      then:
        - globals.set:
            id: weather_condition
            value: !lambda "return x;"
        - script.execute: refresh_display_weather_condition
  # Nextion text sensors
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextStatus
    component_name: ${home_page_name}.txtStatus
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextWeatherAq
    component_name: ${weather_page_name}.txtWeatherAq
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextWeatherIcon
    component_name: ${weather_page_name}.txtWeatherIcon
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextZone1Name
    component_name: ${zones_page_name}.txtZone1Name
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextZone2Name
    component_name: ${zones_page_name}.txtZone2Name
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextZone3Name
    component_name: ${zones_page_name}.txtZone3Name
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextZone4Name
    component_name: ${zones_page_name}.txtZone4Name
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextZone5Name
    component_name: ${zones_page_name}.txtZone5Name
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextZone6Name
    component_name: ${zones_page_name}.txtZone6Name
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextZone7Name
    component_name: ${zones_page_name}.txtZone7Name
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextZone8Name
    component_name: ${zones_page_name}.txtZone8Name
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1
    component_name: ${sensors_page_name}.txtSensor1
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2
    component_name: ${sensors_page_name}.txtSensor2
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3
    component_name: ${sensors_page_name}.txtSensor3
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4
    component_name: ${sensors_page_name}.txtSensor4
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5
    component_name: ${sensors_page_name}.txtSensor5
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6
    component_name: ${sensors_page_name}.txtSensor6
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7
    component_name: ${sensors_page_name}.txtSensor7
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8
    component_name: ${sensors_page_name}.txtSensor8
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1a
    component_name: ${sensors_page_name}.txtSensor1a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2a
    component_name: ${sensors_page_name}.txtSensor2a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3a
    component_name: ${sensors_page_name}.txtSensor3a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4a
    component_name: ${sensors_page_name}.txtSensor4a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5a
    component_name: ${sensors_page_name}.txtSensor5a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6a
    component_name: ${sensors_page_name}.txtSensor6a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7a
    component_name: ${sensors_page_name}.txtSensor7a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8a
    component_name: ${sensors_page_name}.txtSensor8a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1b
    component_name: ${sensors_page_name}.txtSensor1b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2b
    component_name: ${sensors_page_name}.txtSensor2b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3b
    component_name: ${sensors_page_name}.txtSensor3b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4b
    component_name: ${sensors_page_name}.txtSensor4b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5b
    component_name: ${sensors_page_name}.txtSensor5b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6b
    component_name: ${sensors_page_name}.txtSensor6b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7b
    component_name: ${sensors_page_name}.txtSensor7b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8b
    component_name: ${sensors_page_name}.txtSensor8b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1c
    component_name: ${sensors_page_name}.txtSensor1c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2c
    component_name: ${sensors_page_name}.txtSensor2c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3c
    component_name: ${sensors_page_name}.txtSensor3c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4c
    component_name: ${sensors_page_name}.txtSensor4c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5c
    component_name: ${sensors_page_name}.txtSensor5c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6c
    component_name: ${sensors_page_name}.txtSensor6c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7c
    component_name: ${sensors_page_name}.txtSensor7c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8c
    component_name: ${sensors_page_name}.txtSensor8c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1d
    component_name: ${sensors_page_name}.txtSensor1d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2d
    component_name: ${sensors_page_name}.txtSensor2d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3d
    component_name: ${sensors_page_name}.txtSensor3d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4d
    component_name: ${sensors_page_name}.txtSensor4d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5d
    component_name: ${sensors_page_name}.txtSensor5d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6d
    component_name: ${sensors_page_name}.txtSensor6d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7d
    component_name: ${sensors_page_name}.txtSensor7d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8d
    component_name: ${sensors_page_name}.txtSensor8d

display:
  - platform: nextion
    id: main_lcd
    uart_id: nextion_uart
    update_interval: 1s
    tft_url: https://www.kbx81.net/download/public/sprinkler/NX8048P070-011C.tft
    lambda: |-
      auto dateTime = id(esptime).now();
      // update the Nextion's clock once per hour (and at start-up)
      if (id(display_last_full_refresh) != dateTime.hour) {
        id(display_last_full_refresh) = dateTime.hour;
        main_lcd->set_nextion_rtc_time(dateTime);
      }
      if (id(sprinkler_ctrlr).active_valve().has_value()) {
        id(nextionSprinklerZoneTotalSecRemain).set_state(id(sprinkler_ctrlr).time_remaining_active_valve().value_or(0));
      }
    on_setup:
      then:
        - script.execute: refresh_display_status_string
        - script.execute: refresh_display_door_state
        - script.execute: refresh_display_sprinkler_state
        - script.execute: refresh_display_zone_names
        - script.execute: refresh_display_zone_run_enable_states
        - script.execute: refresh_display_zone_run_durations
        - lambda: |-
            main_lcd->goto_page("main");
            id(nextionTextSensor1).set_state("BME680:", false, true);
            id(nextionTextSensor2).set_state("BME280:", false, true);
            id(nextionTextSensor3).set_state("SHTC3:", false, true);
            id(nextionTextSensor4).set_state("TMP117:", false, true);
            id(nextionTextSensor5).set_state("DHT22:", false, true);
            id(nextionTextSensor6).set_state("Thermistor 1:", false, true);
            id(nextionTextSensor7).set_state("Thermistor 2:", false, true);
            id(nextionTextSensor8).set_state("SGP40:", false, true);
